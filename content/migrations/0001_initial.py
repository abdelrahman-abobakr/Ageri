# Generated by Django 4.2.7 on 2025-07-01 21:21

import content.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("object_id", models.PositiveIntegerField()),
                ("content", models.TextField(max_length=1000)),
                ("is_approved", models.BooleanField(default=True)),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("like_count", models.PositiveIntegerField(default=0)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="content.comment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Comment",
                "verbose_name_plural": "Comments",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField(help_text="Main post content")),
                (
                    "excerpt",
                    models.CharField(
                        blank=True,
                        help_text="Brief excerpt for list views (auto-generated if empty)",
                        max_length=300,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("event", "Event"),
                            ("activity", "Activity"),
                            ("workshop", "Workshop"),
                            ("seminar", "Seminar"),
                            ("conference", "Conference"),
                            ("training", "Training"),
                            ("collaboration", "Collaboration"),
                            ("achievement", "Achievement"),
                            ("general", "General"),
                        ],
                        default="general",
                        max_length=20,
                    ),
                ),
                (
                    "tags",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated tags for categorization",
                        max_length=200,
                    ),
                ),
                (
                    "event_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time for events (optional)",
                        null=True,
                    ),
                ),
                (
                    "event_location",
                    models.CharField(
                        blank=True,
                        help_text="Location for events (optional)",
                        max_length=200,
                    ),
                ),
                (
                    "registration_required",
                    models.BooleanField(
                        default=False,
                        help_text="Whether registration is required for this event",
                    ),
                ),
                (
                    "registration_deadline",
                    models.DateTimeField(
                        blank=True,
                        help_text="Registration deadline (if applicable)",
                        null=True,
                    ),
                ),
                (
                    "max_participants",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum number of participants (optional)",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("draft", "Draft"),
                            ("published", "Published"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(default=False, help_text="Feature on homepage"),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=True,
                        help_text="Visible to public (non-authenticated users)",
                    ),
                ),
                (
                    "publish_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When to publish the post",
                    ),
                ),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "featured_image",
                    models.ImageField(
                        blank=True,
                        help_text="Featured image for the post",
                        upload_to=content.models.upload_to_posts,
                    ),
                ),
                (
                    "attachment",
                    models.FileField(
                        blank=True,
                        help_text="Optional attachment (PDF, DOC, DOCX, JPG, PNG)",
                        upload_to=content.models.upload_to_posts,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=[
                                    "pdf",
                                    "doc",
                                    "docx",
                                    "jpg",
                                    "jpeg",
                                    "png",
                                ]
                            )
                        ],
                    ),
                ),
                ("view_count", models.PositiveIntegerField(default=0)),
                ("like_count", models.PositiveIntegerField(default=0)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="authored_posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Post",
                "verbose_name_plural": "Posts",
                "ordering": ["-is_featured", "-publish_at"],
            },
        ),
        migrations.CreateModel(
            name="CommentLike",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="likes",
                        to="content.comment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comment_likes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Comment Like",
                "verbose_name_plural": "Comment Likes",
            },
        ),
        migrations.CreateModel(
            name="Announcement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField(help_text="Main announcement content")),
                (
                    "summary",
                    models.CharField(
                        blank=True,
                        help_text="Brief summary for list views (auto-generated if empty)",
                        max_length=300,
                    ),
                ),
                (
                    "announcement_type",
                    models.CharField(
                        choices=[
                            ("general", "General"),
                            ("urgent", "Urgent"),
                            ("maintenance", "Maintenance"),
                            ("event", "Event"),
                            ("deadline", "Deadline"),
                            ("news", "News"),
                            ("policy", "Policy Update"),
                        ],
                        default="general",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                (
                    "target_audience",
                    models.CharField(
                        choices=[
                            ("all", "All Users"),
                            ("researchers", "Researchers Only"),
                            ("moderators", "Moderators Only"),
                            ("admins", "Admins Only"),
                            ("approved", "Approved Users Only"),
                        ],
                        default="all",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("draft", "Draft"),
                            ("published", "Published"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                (
                    "is_pinned",
                    models.BooleanField(
                        default=False, help_text="Pin announcement to top of list"
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(default=False, help_text="Feature on homepage"),
                ),
                (
                    "publish_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When to publish the announcement",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When announcement expires (optional)",
                        null=True,
                    ),
                ),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "attachment",
                    models.FileField(
                        blank=True,
                        help_text="Optional attachment (PDF, DOC, DOCX, JPG, PNG)",
                        upload_to=content.models.upload_to_announcements,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=[
                                    "pdf",
                                    "doc",
                                    "docx",
                                    "jpg",
                                    "jpeg",
                                    "png",
                                ]
                            )
                        ],
                    ),
                ),
                ("view_count", models.PositiveIntegerField(default=0)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_announcements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="authored_announcements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Announcement",
                "verbose_name_plural": "Announcements",
                "ordering": ["-is_pinned", "-priority", "-publish_at"],
            },
        ),
        migrations.CreateModel(
            name="PostLike",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="likes",
                        to="content.post",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="post_likes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Post Like",
                "verbose_name_plural": "Post Likes",
                "unique_together": {("post", "user")},
            },
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(fields=["status"], name="content_pos_status_94dfa7_idx"),
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(
                fields=["category"], name="content_pos_categor_d3890a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(
                fields=["publish_at"], name="content_pos_publish_dab7bb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(
                fields=["event_date"], name="content_pos_event_d_fc6de6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(
                fields=["-is_featured", "-publish_at"],
                name="content_pos_is_feat_743a04_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="commentlike",
            unique_together={("comment", "user")},
        ),
        migrations.AddIndex(
            model_name="comment",
            index=models.Index(
                fields=["content_type", "object_id"],
                name="content_com_content_859e0d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="comment",
            index=models.Index(
                fields=["author"], name="content_com_author__a00d8f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="comment",
            index=models.Index(
                fields=["is_approved"], name="content_com_is_appr_d679d3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="comment",
            index=models.Index(
                fields=["parent"], name="content_com_parent__b3cec5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="announcement",
            index=models.Index(fields=["status"], name="content_ann_status_eea8ed_idx"),
        ),
        migrations.AddIndex(
            model_name="announcement",
            index=models.Index(
                fields=["announcement_type"], name="content_ann_announc_cfa55a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="announcement",
            index=models.Index(
                fields=["target_audience"], name="content_ann_target__67daec_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="announcement",
            index=models.Index(
                fields=["publish_at"], name="content_ann_publish_19c6ff_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="announcement",
            index=models.Index(
                fields=["expires_at"], name="content_ann_expires_79b68b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="announcement",
            index=models.Index(
                fields=["-is_pinned", "-priority"],
                name="content_ann_is_pinn_c675ff_idx",
            ),
        ),
    ]
