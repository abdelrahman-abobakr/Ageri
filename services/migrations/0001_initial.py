# Generated by Django 4.2.7 on 2025-07-03 16:38

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("organization", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Client",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200)),
                ("organization", models.CharField(blank=True, max_length=200)),
                (
                    "client_type",
                    models.CharField(
                        choices=[
                            ("individual", "Individual"),
                            ("company", "Company"),
                            ("university", "University"),
                            ("government", "Government Agency"),
                            ("ngo", "NGO"),
                            ("other", "Other"),
                        ],
                        default="individual",
                        max_length=20,
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("address", models.TextField(blank=True)),
                ("position", models.CharField(blank=True, max_length=100)),
                ("department", models.CharField(blank=True, max_length=100)),
                ("website", models.URLField(blank=True)),
                (
                    "client_id",
                    models.CharField(
                        help_text="Unique client identifier (e.g., CL2024-001)",
                        max_length=20,
                        unique=True,
                    ),
                ),
                ("registration_date", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                ("billing_address", models.TextField(blank=True)),
                ("tax_id", models.CharField(blank=True, max_length=50)),
                (
                    "payment_terms",
                    models.CharField(
                        choices=[
                            ("immediate", "Immediate"),
                            ("net_15", "Net 15 days"),
                            ("net_30", "Net 30 days"),
                            ("net_60", "Net 60 days"),
                        ],
                        default="net_30",
                        max_length=20,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Internal notes about the client"
                    ),
                ),
                ("total_requests", models.PositiveIntegerField(default=0)),
                (
                    "total_spent",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=12
                    ),
                ),
            ],
            options={
                "ordering": ["-registration_date"],
            },
        ),
        migrations.CreateModel(
            name="TechnicianAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("primary", "Primary Technician"),
                            ("secondary", "Secondary Technician"),
                            ("supervisor", "Supervisor"),
                            ("specialist", "Specialist"),
                        ],
                        default="primary",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("start_date", models.DateField(default=django.utils.timezone.now)),
                ("end_date", models.DateField(blank=True, null=True)),
                (
                    "max_concurrent_requests",
                    models.PositiveIntegerField(
                        default=3,
                        help_text="Maximum concurrent requests this technician can handle for this service",
                    ),
                ),
                ("current_requests", models.PositiveIntegerField(default=0)),
                ("total_completed", models.PositiveIntegerField(default=0)),
                (
                    "average_completion_time",
                    models.DurationField(blank=True, null=True),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Notes about this assignment"
                    ),
                ),
            ],
            options={
                "ordering": ["service", "-is_active", "role"],
            },
        ),
        migrations.CreateModel(
            name="TestService",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "short_description",
                    models.CharField(
                        blank=True,
                        help_text="Brief description for service listings",
                        max_length=300,
                    ),
                ),
                (
                    "service_code",
                    models.CharField(
                        help_text="Unique service identifier (e.g., TS2024-001)",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("testing", "Testing & Analysis"),
                            ("consultation", "Consultation"),
                            ("equipment_access", "Equipment Access"),
                            ("sample_analysis", "Sample Analysis"),
                            ("calibration", "Calibration Services"),
                            ("training", "Technical Training"),
                            ("research_support", "Research Support"),
                            ("other", "Other Services"),
                        ],
                        default="testing",
                        max_length=20,
                    ),
                ),
                (
                    "base_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Base service price",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                ("is_free", models.BooleanField(default=False)),
                (
                    "pricing_structure",
                    models.TextField(
                        blank=True,
                        help_text="Detailed pricing information (e.g., per sample, per hour)",
                    ),
                ),
                (
                    "estimated_duration",
                    models.CharField(
                        blank=True,
                        help_text="Estimated time to complete (e.g., '2-3 business days')",
                        max_length=100,
                    ),
                ),
                (
                    "sample_requirements",
                    models.TextField(
                        blank=True, help_text="Sample preparation and requirements"
                    ),
                ),
                (
                    "equipment_used",
                    models.TextField(
                        blank=True, help_text="Equipment and instruments used"
                    ),
                ),
                (
                    "methodology",
                    models.TextField(
                        blank=True, help_text="Testing methodology and procedures"
                    ),
                ),
                (
                    "max_concurrent_requests",
                    models.PositiveIntegerField(
                        default=5,
                        help_text="Maximum number of concurrent service requests",
                    ),
                ),
                ("current_requests", models.PositiveIntegerField(default=0)),
                (
                    "required_documents",
                    models.TextField(
                        blank=True, help_text="Documents required for service request"
                    ),
                ),
                (
                    "safety_requirements",
                    models.TextField(
                        blank=True, help_text="Safety requirements and precautions"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("draft", "Draft"),
                            ("published", "Published"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("is_featured", models.BooleanField(default=False)),
                ("is_public", models.BooleanField(default=True)),
                ("contact_email", models.EmailField(blank=True, max_length=254)),
                ("contact_phone", models.CharField(blank=True, max_length=20)),
                (
                    "featured_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="services/test_services/"
                    ),
                ),
                (
                    "service_brochure",
                    models.FileField(
                        blank=True,
                        help_text="Service information brochure",
                        null=True,
                        upload_to="services/brochures/",
                    ),
                ),
                (
                    "tags",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated tags for categorization",
                        max_length=500,
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="test_services",
                        to="organization.department",
                    ),
                ),
                (
                    "lab",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="test_services",
                        to="organization.lab",
                    ),
                ),
                (
                    "technicians",
                    models.ManyToManyField(
                        blank=True,
                        limit_choices_to={"role__in": ["admin", "moderator"]},
                        related_name="assigned_services",
                        through="services.TechnicianAssignment",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-is_featured", "name"],
            },
        ),
        migrations.AddField(
            model_name="technicianassignment",
            name="service",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="technician_assignments",
                to="services.testservice",
            ),
        ),
        migrations.AddField(
            model_name="technicianassignment",
            name="technician",
            field=models.ForeignKey(
                limit_choices_to={"role__in": ["admin", "moderator"]},
                on_delete=django.db.models.deletion.CASCADE,
                related_name="service_assignments",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="ServiceRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "request_id",
                    models.CharField(
                        help_text="Unique request identifier (e.g., SR2024-001)",
                        max_length=20,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "sample_description",
                    models.TextField(
                        blank=True, help_text="Description of samples to be tested"
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        default=1, help_text="Number of samples or units"
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "urgency",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                ("requested_date", models.DateTimeField(auto_now_add=True)),
                ("preferred_completion_date", models.DateField(blank=True, null=True)),
                ("started_date", models.DateTimeField(blank=True, null=True)),
                ("completed_date", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("submitted", "Submitted"),
                            ("under_review", "Under Review"),
                            ("approved", "Approved"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("delivered", "Delivered"),
                            ("cancelled", "Cancelled"),
                            ("on_hold", "On Hold"),
                        ],
                        default="submitted",
                        max_length=20,
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "final_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("is_paid", models.BooleanField(default=False)),
                ("payment_date", models.DateTimeField(blank=True, null=True)),
                (
                    "request_documents",
                    models.FileField(
                        blank=True,
                        help_text="Supporting documents for the request",
                        null=True,
                        upload_to="services/requests/documents/",
                    ),
                ),
                (
                    "results_file",
                    models.FileField(
                        blank=True,
                        help_text="Test results and reports",
                        null=True,
                        upload_to="services/requests/results/",
                    ),
                ),
                (
                    "client_notes",
                    models.TextField(blank=True, help_text="Notes from the client"),
                ),
                (
                    "internal_notes",
                    models.TextField(
                        blank=True, help_text="Internal notes for technicians"
                    ),
                ),
                ("review_date", models.DateTimeField(blank=True, null=True)),
                ("review_notes", models.TextField(blank=True)),
                (
                    "assigned_technician",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"role__in": ["admin", "moderator"]},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_requests",
                        to="services.client",
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_service_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="requests",
                        to="services.testservice",
                    ),
                ),
            ],
            options={
                "ordering": ["-requested_date"],
            },
        ),
        migrations.AddIndex(
            model_name="client",
            index=models.Index(
                fields=["client_type", "is_active"],
                name="services_cl_client__8b4cae_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="client",
            index=models.Index(
                fields=["organization"], name="services_cl_organiz_f2a2aa_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="testservice",
            index=models.Index(
                fields=["status", "category"], name="services_te_status_47d8c1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="testservice",
            index=models.Index(
                fields=["is_featured", "is_public"],
                name="services_te_is_feat_e8296f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="testservice",
            index=models.Index(
                fields=["department", "lab"], name="services_te_departm_080a90_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="technicianassignment",
            unique_together={("service", "technician")},
        ),
        migrations.AddIndex(
            model_name="servicerequest",
            index=models.Index(
                fields=["status", "priority"], name="services_se_status_14d62b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="servicerequest",
            index=models.Index(
                fields=["service", "client"], name="services_se_service_3f8af4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="servicerequest",
            index=models.Index(
                fields=["assigned_technician"], name="services_se_assigne_a96beb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="servicerequest",
            index=models.Index(
                fields=["requested_date"], name="services_se_request_3f025a_idx"
            ),
        ),
    ]
