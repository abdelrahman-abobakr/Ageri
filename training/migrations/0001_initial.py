# Generated by Django 4.2.7 on 2025-07-24 15:50

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('organization', '0003_organizationsettings_mission_image_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course_name', models.CharField(help_text='Name of the course', max_length=200)),
                ('instructor', models.CharField(help_text='Name of the course instructor (can be external)', max_length=255)),
                ('cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Course cost/fee', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('start_date', models.DateField(help_text='Course start date')),
                ('end_date', models.DateField(help_text='Course end date')),
                ('registration_deadline', models.DateField(help_text='Last date for registration')),
                ('type', models.CharField(choices=[('course', 'Course'), ('summer_training', 'Summer Training'), ('public_service', 'Public Service'), ('workshop', 'Workshop'), ('seminar', 'Seminar')], default='course', help_text='Type of training/course', max_length=20)),
                ('training_hours', models.PositiveIntegerField(help_text='Total training hours for the course')),
                ('description', models.TextField(help_text='Detailed course description')),
                ('course_code', models.CharField(help_text='Unique course identifier (e.g., CS101)', max_length=20, unique=True)),
                ('max_participants', models.PositiveIntegerField(default=30, help_text='Maximum number of participants')),
                ('current_enrollment', models.PositiveIntegerField(default=0, help_text='Current number of enrolled participants')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('active', 'Active'), ('inactive', 'Inactive'), ('draft', 'Draft'), ('published', 'Published')], default='draft', help_text='Course status', max_length=20)),
                ('is_featured', models.BooleanField(default=False, help_text='Whether to feature this course')),
                ('is_public', models.BooleanField(default=True, help_text='Whether this course is publicly visible')),
                ('featured_image', models.ImageField(blank=True, help_text='Course promotional image', null=True, upload_to='training/courses/')),
                ('syllabus', models.FileField(blank=True, help_text='Course syllabus PDF', null=True, upload_to='training/syllabi/')),
                ('prerequisites', models.TextField(blank=True, help_text='Course prerequisites and requirements')),
                ('materials_provided', models.TextField(blank=True, help_text='Materials and resources provided')),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags for categorization', max_length=500)),
                ('department', models.ForeignKey(blank=True, help_text='Department offering this course (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='courses', to='organization.department')),
            ],
            options={
                'ordering': ['-is_featured', '-start_date'],
            },
        ),
        migrations.CreateModel(
            name='PublicService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('short_description', models.CharField(blank=True, help_text='Brief description for service listings', max_length=300)),
                ('service_code', models.CharField(help_text='Unique service identifier (e.g., PS2024-01)', max_length=20, unique=True)),
                ('service_category', models.CharField(choices=[('consultation', 'Consultation'), ('testing', 'Testing & Analysis'), ('training', 'Training & Workshops'), ('research', 'Research Collaboration'), ('equipment', 'Equipment Access'), ('other', 'Other Services')], default='consultation', max_length=50)),
                ('is_ongoing', models.BooleanField(default=True, help_text='Whether this service is continuously available')),
                ('start_date', models.DateField(blank=True, help_text='Start date for time-limited services', null=True)),
                ('end_date', models.DateField(blank=True, help_text='End date for time-limited services', null=True)),
                ('max_concurrent_requests', models.PositiveIntegerField(default=5, help_text='Maximum number of concurrent service requests')),
                ('current_requests', models.PositiveIntegerField(default=0)),
                ('is_free', models.BooleanField(default=True)),
                ('base_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Base service price', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('pricing_details', models.TextField(blank=True, help_text='Detailed pricing information and structure')),
                ('eligibility_criteria', models.TextField(blank=True, help_text='Who can access this service')),
                ('required_documents', models.TextField(blank=True, help_text='Documents required for service request')),
                ('process_description', models.TextField(help_text='How to request and receive this service')),
                ('estimated_turnaround', models.CharField(blank=True, help_text="Estimated time to complete service (e.g., '2-3 business days')", max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('active', 'Active'), ('inactive', 'Inactive'), ('draft', 'Draft'), ('published', 'Published')], default='published', max_length=20)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('contact_phone', models.CharField(blank=True, max_length=20)),
                ('location', models.CharField(blank=True, help_text='Physical location where service is provided', max_length=200)),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='training/public_services/')),
                ('service_brochure', models.FileField(blank=True, help_text='Service information brochure', null=True, upload_to='training/service_brochures/')),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags for categorization', max_length=500)),
                ('coordinator', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['admin', 'moderator']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='coordinated_public_services', to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='public_services', to='organization.department')),
            ],
            options={
                'ordering': ['-is_featured', 'title'],
            },
        ),
        migrations.CreateModel(
            name='SummerTraining',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('short_description', models.CharField(blank=True, help_text='Brief description for program listings', max_length=300)),
                ('program_code', models.CharField(help_text='Unique program identifier (e.g., ST2024-01)', max_length=20, unique=True)),
                ('duration_weeks', models.PositiveIntegerField(default=8, help_text='Program duration in weeks', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(16)])),
                ('hours_per_week', models.PositiveIntegerField(default=40, help_text='Training hours per week', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(60)])),
                ('training_type', models.CharField(choices=[('course', 'Course'), ('summer_training', 'Summer Training'), ('public_service', 'Public Service'), ('workshop', 'Workshop'), ('seminar', 'Seminar')], default='summer_training', max_length=20)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='intermediate', max_length=15)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('application_deadline', models.DateField()),
                ('max_trainees', models.PositiveIntegerField(default=10)),
                ('min_trainees', models.PositiveIntegerField(default=3)),
                ('current_enrollment', models.PositiveIntegerField(default=0)),
                ('academic_requirements', models.TextField(help_text='Academic requirements (e.g., minimum GPA, year of study)')),
                ('skills_requirements', models.TextField(blank=True, help_text='Required skills and knowledge')),
                ('learning_objectives', models.TextField(help_text='What trainees will learn and achieve')),
                ('project_description', models.TextField(blank=True, help_text='Description of projects trainees will work on')),
                ('is_paid', models.BooleanField(default=False)),
                ('stipend_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Monthly stipend amount', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('provides_certificate', models.BooleanField(default=True)),
                ('provides_recommendation', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('active', 'Active'), ('inactive', 'Inactive'), ('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=20)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='training/summer_programs/')),
                ('program_brochure', models.FileField(blank=True, help_text='Program brochure PDF', null=True, upload_to='training/brochures/')),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags for categorization', max_length=500)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='summer_trainings', to='organization.department')),
                ('lab', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='summer_trainings', to='organization.lab')),
                ('supervisor', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['admin', 'moderator']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supervised_summer_trainings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_featured', '-start_date'],
            },
        ),
        migrations.CreateModel(
            name='PublicServiceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='submitted', max_length=20)),
                ('request_description', models.TextField(help_text='Detailed description of what you need')),
                ('urgency_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('preferred_date', models.DateField(blank=True, help_text='Preferred date for service delivery', null=True)),
                ('contact_person', models.CharField(help_text='Primary contact person for this request', max_length=100)),
                ('contact_email', models.EmailField(max_length=254)),
                ('contact_phone', models.CharField(blank=True, max_length=20)),
                ('organization', models.CharField(blank=True, help_text='Organization or institution making the request', max_length=200)),
                ('supporting_documents', models.FileField(blank=True, help_text='Supporting documents for the request', null=True, upload_to='training/service_requests/')),
                ('estimated_completion', models.DateField(blank=True, null=True)),
                ('actual_completion', models.DateField(blank=True, null=True)),
                ('payment_required', models.BooleanField(default=False)),
                ('payment_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('service_notes', models.TextField(blank=True, help_text='Internal notes about service delivery')),
                ('results_summary', models.TextField(blank=True, help_text='Summary of service results')),
                ('client_feedback', models.TextField(blank=True, help_text='Client feedback about the service')),
                ('satisfaction_rating', models.PositiveIntegerField(blank=True, help_text='Client satisfaction rating (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('assigned_to', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['admin', 'moderator']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_service_requests', to=settings.AUTH_USER_MODEL)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_requests', to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='training.publicservice')),
            ],
            options={
                'ordering': ['-request_date'],
            },
        ),
        migrations.CreateModel(
            name='CourseEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('enrollment_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('completed', 'Completed'), ('dropped', 'Dropped')], default='pending', max_length=20)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('payment_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('payment_reference', models.CharField(blank=True, max_length=100)),
                ('grade', models.CharField(blank=True, help_text='Final grade (A, B, C, D, F)', max_length=5)),
                ('attendance_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('certificate_issued', models.BooleanField(default=False)),
                ('certificate_number', models.CharField(blank=True, max_length=50)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the enrollment')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='training.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_enrollments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-enrollment_date'],
            },
        ),
        migrations.CreateModel(
            name='SummerTrainingApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('application_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('completed', 'Completed'), ('withdrawn', 'Withdrawn')], default='submitted', max_length=20)),
                ('university', models.CharField(max_length=200)),
                ('major', models.CharField(max_length=100)),
                ('year_of_study', models.CharField(choices=[('freshman', 'Freshman'), ('sophomore', 'Sophomore'), ('junior', 'Junior'), ('senior', 'Senior'), ('graduate', 'Graduate')], max_length=20)),
                ('gpa', models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('motivation_letter', models.TextField(help_text='Why do you want to join this program?')),
                ('relevant_experience', models.TextField(blank=True, help_text='Relevant academic or professional experience')),
                ('skills_and_interests', models.TextField(help_text='Technical skills and research interests')),
                ('cv_file', models.FileField(blank=True, help_text='Upload your CV/Resume (optional)', null=True, upload_to='training/applications/cvs/')),
                ('transcript', models.FileField(blank=True, help_text='Academic transcript (optional)', null=True, upload_to='training/applications/transcripts/')),
                ('recommendation_letter', models.FileField(blank=True, help_text='Letter of recommendation (optional)', null=True, upload_to='training/applications/recommendations/')),
                ('review_date', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('final_evaluation', models.TextField(blank=True)),
                ('certificate_issued', models.BooleanField(default=False)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='summer_training_applications', to=settings.AUTH_USER_MODEL)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='training.summertraining')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_summer_applications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-application_date'],
                'indexes': [models.Index(fields=['status', 'application_date'], name='training_su_status_75690f_idx'), models.Index(fields=['program', 'status'], name='training_su_program_19cb08_idx')],
                'unique_together': {('program', 'applicant')},
            },
        ),
        migrations.AddIndex(
            model_name='summertraining',
            index=models.Index(fields=['status', 'start_date'], name='training_su_status_b51dc6_idx'),
        ),
        migrations.AddIndex(
            model_name='summertraining',
            index=models.Index(fields=['is_featured', 'is_public'], name='training_su_is_feat_35581c_idx'),
        ),
        migrations.AddIndex(
            model_name='summertraining',
            index=models.Index(fields=['application_deadline'], name='training_su_applica_c92ceb_idx'),
        ),
        migrations.AddIndex(
            model_name='publicservicerequest',
            index=models.Index(fields=['status', 'request_date'], name='training_pu_status_e4082f_idx'),
        ),
        migrations.AddIndex(
            model_name='publicservicerequest',
            index=models.Index(fields=['service', 'status'], name='training_pu_service_5f17ee_idx'),
        ),
        migrations.AddIndex(
            model_name='publicservicerequest',
            index=models.Index(fields=['urgency_level'], name='training_pu_urgency_e5555c_idx'),
        ),
        migrations.AddIndex(
            model_name='publicservice',
            index=models.Index(fields=['status', 'service_category'], name='training_pu_status_ab5cc6_idx'),
        ),
        migrations.AddIndex(
            model_name='publicservice',
            index=models.Index(fields=['is_featured', 'is_public'], name='training_pu_is_feat_829490_idx'),
        ),
        migrations.AddIndex(
            model_name='publicservice',
            index=models.Index(fields=['is_ongoing'], name='training_pu_is_ongo_232a1c_idx'),
        ),
        migrations.AddIndex(
            model_name='courseenrollment',
            index=models.Index(fields=['status', 'enrollment_date'], name='training_co_status_645d11_idx'),
        ),
        migrations.AddIndex(
            model_name='courseenrollment',
            index=models.Index(fields=['payment_status'], name='training_co_payment_4bd6d5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='courseenrollment',
            unique_together={('course', 'student')},
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['status', 'start_date'], name='training_co_status_67cc0f_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['type'], name='training_co_type_846607_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['is_featured', 'is_public'], name='training_co_is_feat_58bf60_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['registration_deadline'], name='training_co_registr_5c1dc8_idx'),
        ),
    ]
